查询

(1)、查询函数的参数

当我们想要知道某个函数会接收哪些参数的时候，可以使用下面方法查询。

import inspect
print(inspect.getargspec(func))
(2)、查询对象的属性

除了使用dir()来查询对象的属性之外，我们可以使用下面内置(built-in)函数来确认一个对象是否具有某个属性：

hasattr(obj, attr_name)   # attr_name是一个字符串
例如：

a = [1,2,3]
print(hasattr(a,'append'))
(3)、查询对象所属的类和类名称

a = [1, 2, 3]
print a.__class__
print a.__class__.__name__
(4)、查询父类

我们可以用 __base__ 属性来查询某个类的父类：

cls.__base__
例如：

print(list.__base__)



使用中文(以及其它非ASCII编码)

在Python程序的第一行加入#coding=utf8，例如:

#coding=utf8
print("你好吗？")
也能用以下方式：

#-*- coding: UTF-8 -*-
print("你好吗？")



注释
一行内的注释可以以#开始。
多行的注释可以以'''开始，以'''结束，比如：
'''
This is demo
'''

def func():
    # print something
    print("Hello world!")  # use print() function

# main
func()
注释应该和所在的程序块对齐。



搜索路径

当我们import的时候，Python会在搜索路径中查找模块(module)。比如上面import TestLib，就要求TestLib.py在搜索路径中。

我们可以通过下面方法来查看搜索路径：

import sys
print(sys.path)
我们可以在Python运行的时候增加或者删除sys.path中的元素。另一方面，我们可以通过在shell中增加PYTHONPATH环境变量，来为Python增加搜索路径。

下面我们增加/home/vamei/mylib到搜索路径中：

$export PYTHONPATH=$PYTHONPATH:/home/vamei/mylib
你可以将正面的这行命令加入到～/.bashrc中。这样，我们就长期的改变了搜索路径。



脚本与命令行结合

可以使用下面方法运行一个Python脚本，在脚本运行结束后，直接进入Python命令行。这样做的好处是脚本的对象不会被清空，可以通过命令行直接调用。

$python -i script.py



使用pip。pip是Python自带的包管理程序，它连接Python repository，并查找其中可能存在的包。

比如使用如下方法来安装、卸载或者升级web.py：

$pip install -i http://mirrors.aliyuncs.com/pypi/simple web.py

$pip uninstall web.py

$pip install -i http://mirrors.aliyuncs.com/pypi/simple --upgrade web.py
如果你的Python安装在一个非标准的路径(使用$which python来确认python可执行文件的路径)中，比如/home/vamei/util/python/bin中，你可以使用下面方法设置pip的安装包的路径:

$pip install -i http://mirrors.aliyuncs.com/pypi/simple --install-option="--prefix=/home/vamei/util/" web.py
(3)、从源码编译

如果上面方法都没法找到你想要的库，你可能需要从源码开始编译。



